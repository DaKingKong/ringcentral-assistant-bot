service: ringcentral-ring-bot
provider:
  stage: ${opt:stage, 'prod'}
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  memorySize: 256
  environment: ${file(./env.yml)}
  profile: ringBot
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - lambda:InvokeFunction
  #     Resource: ""
  tags:
    Department: 
    Owner: 
    Stage: 
    Environment: ringcentral-ring-bot
    Team: 
    Name: ringcentral-ring-bot
package:
  excludeDevDependencies: true
  patterns:
    - '.json'
    - '.js'
    - 'node_modules/**'
functions:
  app:
    handler: lambda.app
    # role: arn:aws:iam::111111:role/xxxx-prod-us-east-1-lambdaRole
    events:
      - http:
          method: any
          path: /{proxy+}
          cors: false
resources:
  Resources:
    botTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ringcentral-ring-bot-rc-user
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    testTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ringcentral-ring-bot-reply-setting
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    replyRecordTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ringcentral-ring-bot-reply-record
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1